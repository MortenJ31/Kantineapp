@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="login-card">
        <h2>Log ind</h2>

        <!-- Viser fejlmeddelelse, hvis login fejler -->
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <!-- Formular til login -->
        <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="loginRequest.Email" class="form-control" placeholder="Indtast din email" />
            </div>

            <div class="form-group">
                <label for="password">Adgangskode</label>
                <InputText id="password" @bind-Value="loginRequest.Password" type="password" class="form-control" placeholder="Indtast din adgangskode" />
            </div>

            <button type="submit" class="btn btn-primary btn-block mt-3">Log ind</button>
        </EditForm>
    </div>
</div>

<style>
    /* Centrerer login-containeren på siden */
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f9f9f9;
    }
    /* Stil til login-kortet */
    .login-card {
        background: white;
        border-radius: 8px;
        padding: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        width: 100%;
    }
    /* Stil til inputfelter og knap */
    .form-group {
        margin-bottom: 1rem;
    }
    .btn-block {
        width: 100%;
    }
</style>

@code {
    // Model til at holde login-data
    private LoginRequest loginRequest = new();

    // Fejlbesked, der vises, hvis login mislykkes
    private string ErrorMessage;

    // Håndterer login-processen
    private async Task HandleLogin()
    {
        try
        {
            // Sender loginoplysninger til API'et
            var response = await Http.PostAsJsonAsync("api/login", loginRequest);
            var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

            if (result != null && result.IsSuccessful)
            {
                // Gemmer brugerens rolle i sessionStorage
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "userRole", result.Role);

                // Navigerer til oversigten og genindlæser siden
                NavigationManager.NavigateTo("/overview", true);
            }
            else
            {
                // Viser fejlmeddelelse, hvis login fejler
                ErrorMessage = result?.Message ?? "Login mislykkedes.";
            }
        }
        catch (Exception ex)
        {
            // Fanger fejl under login og viser en fejlmeddelelse
            ErrorMessage = $"Der opstod en fejl: {ex.Message}";
        }
    }
}
