@page "/overview"
@using Kantineapp.Services
@inject IEventService EventService
@inject ITaskItemService TaskItemService
@inject IUserService BrugerService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<div class="container-layout">
    <!-- Event List -->
    <div class="event-list">
        <h3 class="mb-4">Oversigt</h3>
        <!-- Fejlbesked -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
        <div class="alert alert-danger">@errorMessage</div>
        }

        @if (isLoading)
        {
        <p>Indlæser events...</p>
        }
        else if (events == null || !events.Any())
        {
        <p>Ingen events fundet.</p>
        }
        else
        {
        <ul class="list-group">
            @foreach (Core.Models.Event ev in events)
            {
            <li class="list-group-item">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@ev.Name</strong> - @ev.Date.ToShortDateString() - Lokation: @ev.Location
                        <br />
                        Kunde: @ev.Customer - Madvalg: @ev.FoodChoice - Særlige ønsker: @ev.SpecialRequests - Deltagerantal: @ev.Participants
                    </div>
                    <div>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => ToggleTasks(ev.Id)">
                            @(selectedEventId == ev.Id ? "Luk Opgaver" : "Vis Opgaver")
                        </button>
                    </div>
                </div>

                @if (selectedEventId == ev.Id)
                {
                <div class="mt-3">
                    <h5>Opgaver</h5>
                    @if (!tasks.Any())
                    {
                    <p>Ingen opgaver fundet.</p>
                    }
                    else
                    {
                    <ul class="list-group">
                        @foreach (var task in tasks)
                        {
                        <li class="list-group-item">
                            <div>
                                <strong>Opgave:</strong> @task.Description
                                <br />
                                <strong>Status:</strong> @task.Status
                                <br />
                                <strong>Start:</strong> @task.StartTime | <strong>Slut:</strong> @task.EndTime
                                <br />
                                <strong>Opgavetype:</strong> @task.TaskType
                                <br />
                                <strong>Ansvarlige Medarbejdere:</strong>
                                @if (task.ResponsibleForTask != null && task.ResponsibleForTask.Any())
                                {
                                <ul class="mt-2">
                                    @foreach (var medarbejderId in task.ResponsibleForTask)
                                    {
                                    var medarbejder = employees.FirstOrDefault(e => e.Id == medarbejderId);
                                    if (medarbejder != null)
                                    {
                                    <li>
                                        @medarbejder.Name - <em>Kompetencer:</em> @string.Join(", ", medarbejder.MySkills)
                                    </li>
                                    }
                                    }
                                </ul>
                                }
                                else
                                {
                                <span>Ingen medarbejdere tilknyttet</span>
                                }
                            </div>
                        </li>
                        }
                    </ul>
                    }
                </div>
                }
            </li>
            }
        </ul>
        }
    </div>
</div>

@code {
private List<Core.Models.Event> events = new();
private List<TaskItem> tasks = new();
private List<User> employees = new();
private string? selectedEventId;
private string errorMessage = string.Empty;
private bool isLoading = true;

protected override async Task OnInitializedAsync()
{
    // Tjek, om brugeren er logget ind ved at kontrollere, om userRole findes i sessionStorage
    var userRole = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", new object[] { "userRole" });
    
    // Hvis ingen bruger er logget ind, omdiriger til login-siden
    if (string.IsNullOrEmpty(userRole))
    {
        NavigationManager.NavigateTo("/", true);
        return;
    }

    // Fortsæt med at indlæse data, hvis brugeren er logget ind
    await LoadDataAsync();
}

private async Task LoadDataAsync()
{
    isLoading = true;
    errorMessage = string.Empty;
    try
    {
        await LoadEvents();
    }
    catch (Exception ex)
    {
        errorMessage = "Kunne ikke indlæse data.";
        Console.WriteLine($"Fejl: {ex.Message}");
    }
    finally
    {
        isLoading = false;
    }
}

private async Task LoadEvents()
{
    try
    {
        events = (await EventService.GetAllEventsAsync()).ToList();
    }
    catch (Exception ex)
    {
        errorMessage = "Kunne ikke indlæse events.";
        Console.WriteLine($"Fejl: {ex.Message}");
    }
}

private async Task ShowTasks(string eventId)
{
    selectedEventId = eventId;
    try
    {
        await LoadEmployees();
        var allTasks = await TaskItemService.GetAllTaskItemsAsync();
        tasks = allTasks.Where(t => t.EventId == eventId).ToList();
    }
    catch (Exception ex)
    {
        errorMessage = "Kunne ikke indlæse opgaver.";
        Console.WriteLine($"Fejl: {ex.Message}");
    }
}

private async Task LoadEmployees()
{
    try
    {
        employees = (await BrugerService.GetUsersByRoleAsync(Role.Medarbejder)).ToList();
    }
    catch (Exception ex)
    {
        errorMessage = "Kunne ikke indlæse medarbejdere.";
        Console.WriteLine($"Fejl: {ex.Message}");
    }
}

private async Task ToggleTasks(string eventId)
{
    if (selectedEventId == eventId)
    {
        selectedEventId = null;
        tasks.Clear();
    }
    else
    {
        await ShowTasks(eventId);
    }
}
}
