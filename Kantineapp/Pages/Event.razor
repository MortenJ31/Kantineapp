@page "/"
@using Kantineapp.Services
@inject IEventService EventService
@inject IOpgaveService OpgaveService
@inject IBrugerService BrugerService
@using System.Text.Json;

<div class="container-layout">
    <!-- Event List -->
    <div class="event-list">
        <h3 class="mb-4">Oversigten for events</h3>

        <!-- Fejlbesked -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
        <div class="alert alert-danger">@errorMessage</div>
        }

        <button class="btn btn-success mb-3" @onclick="ShowAddEventModal">Opret Event</button>

        @if (isLoading)
        {
        <p>Indlæser events...</p>
        }
        else if (events == null || !events.Any())
        {
        <p>Ingen events fundet.</p>
        }
        else
        {
        <ul class="list-group">
            @foreach (Core.Models.Event ev in events)
            {
            <li class="list-group-item">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@ev.Name</strong> - @ev.Dato.ToShortDateString() - Lokation: @ev.Lokation
                        <br />
                        Kunde: @ev.Kunde - Madvalg: @ev.MadValg - Særlige ønsker: @ev.SærligeØnsker - Deltagerantal: @ev.DeltagerAntal
                    </div>
                    <div>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => ToggleTasks(ev.Id)">
                            @(selectedEventId == ev.Id ? "Luk Opgaver" : "Vis Opgaver")
                        </button>
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => ShowEditEventModal(ev)">Rediger</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteEvent(ev.Id)">Slet</button>
                    </div>
                </div>

                @if (selectedEventId == ev.Id)
                {
                <div class="mt-3">
                    <h5>Opgaver</h5>
                    @if (!tasks.Any())
                    {
                    <p>Ingen opgaver fundet.</p>
                    }
                    else
                    {
                    <ul class="list-group">
                        @foreach (var task in tasks)
                        {
                        <li class="list-group-item">
                            <div>
                                <strong>Opgave:</strong> @task.Beskrivelse
                                <br />
                                <strong>Status:</strong> @task.Status
                                <br />
                                <strong>Start:</strong> @task.StartTid | <strong>Slut:</strong> @task.SlutTid
                                <br />
                                <strong>Opgavetype:</strong> @task.OpgaveType
                                <br />
                                <strong>Ansvarlige Medarbejdere:</strong>
                                @if (task.AnsvarligForOpgave != null && task.AnsvarligForOpgave.Any())
                                {
                                    <ul class="mt-2">
                                        @foreach (var medarbejderId in task.AnsvarligForOpgave)
                                        {
                                            var medarbejder = employees.FirstOrDefault(e => e.Id == medarbejderId);
                                            if (medarbejder != null)
                                            {
                                                <li>
                                                    @medarbejder.Navn - <em>Kompetencer:</em> @string.Join(", ", medarbejder.MineKompetencer)
                                                </li>
                                            }
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <span>Ingen medarbejdere tilknyttet</span>
                                }
                            </div>
                            <div class="mt-2">
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => ShowEditTaskModal(task)">Rediger</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(task.Id)">Slet</button>
                            </div>
                        </li>
                        }
                    </ul>
                    }
                    <button class="btn btn-primary mt-3" @onclick="ShowAddTaskModal">Opret Opgave</button>
                </div>
                }
            </li>
            }
        </ul>
        }
    </div>

    <!-- Modal Container -->
    <div class="modal-container">
        @if (showAddEventModal)
        {
        <div class="modal show d-block">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Opret Event</h5>
                        <button type="button" class="btn-close" @onclick="CloseAddEventModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@newEvent" OnValidSubmit="@AddEvent">
                            <InputText @bind-Value="newEvent.Name" class="form-control mb-2" placeholder="Navn" />
                            <InputDate @bind-Value="newEvent.Dato" class="form-control mb-2" />
                            <InputText @bind-Value="newEvent.Lokation" class="form-control mb-2" placeholder="Lokation" />
                            <InputNumber @bind-Value="newEvent.DeltagerAntal" class="form-control mb-2" placeholder="Deltagerantal" />
                            <InputText @bind-Value="newEvent.MadValg" class="form-control mb-2" placeholder="Madvalg" />
                            <InputText @bind-Value="newEvent.SærligeØnsker" class="form-control mb-2" placeholder="Særlige ønsker" />
                            <InputText @bind-Value="newEvent.Kunde" class="form-control mb-2" placeholder="Kunde" />
                            <button type="submit" class="btn btn-success">Tilføj Event</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        }

        @if (showEditEventModal)
        {
        <div class="modal show d-block">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Rediger Event</h5>
                        <button type="button" class="btn-close" @onclick="CloseEditEventModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@selectedEvent" OnValidSubmit="@UpdateEvent">
                            <InputText @bind-Value="selectedEvent.Name" class="form-control mb-2" placeholder="Navn" />
                            <InputDate @bind-Value="selectedEvent.Dato" class="form-control mb-2" />
                            <InputText @bind-Value="selectedEvent.Lokation" class="form-control mb-2" placeholder="Lokation" />
                            <InputNumber @bind-Value="selectedEvent.DeltagerAntal" class="form-control mb-2" placeholder="Deltagerantal" />
                            <InputText @bind-Value="selectedEvent.MadValg" class="form-control mb-2" placeholder="Madvalg" />
                            <InputText @bind-Value="selectedEvent.SærligeØnsker" class="form-control mb-2" placeholder="Særlige ønsker" />
                            <InputText @bind-Value="selectedEvent.Kunde" class="form-control mb-2" placeholder="Kunde" />
                            <button type="submit" class="btn btn-warning">Opdater</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        }

        @if (showAddTaskModal)
        {
        <div class="modal show d-block">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Opret Opgave</h5>
                        <button type="button" class="btn-close" @onclick="CloseAddTaskModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@newTask" OnValidSubmit="@AddTask">
                            <InputText @bind-Value="newTask.Beskrivelse" class="form-control mb-2" placeholder="Beskrivelse" />
                            <InputText @bind-Value="newTask.StartTid" class="form-control mb-2" placeholder="Starttid" />
                            <InputText @bind-Value="newTask.SlutTid" class="form-control mb-2" placeholder="Sluttid" />
                            <InputSelect @bind-Value="newTask.Status" class="form-control mb-2">
                                @foreach (var status in Enum.GetValues(typeof(Status)))
                                {
                                <option value="@status">@status</option>
                                }
                            </InputSelect>
                            <InputSelect @bind-Value="newTask.OpgaveType" class="form-control mb-2">
                                @foreach (var opgaveType in Enum.GetValues(typeof(OpgaveType)))
                                {
                                <option value="@opgaveType">@opgaveType</option>
                                }
                            </InputSelect>
                            <div class="mb-3">
                                <label>Ansvarlige Medarbejdere:</label>
                                @foreach (var employee in employees)
                                {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="@employee.Id"
                                           value="@employee.Id" @onchange="e => ToggleEmployeeSelection(e, employee.Id)" />
                                    <label class="form-check-label" for="@employee.Id">@employee.Navn - Kompetencer: @string.Join(", ", employee.MineKompetencer)</label>
                                </div>
                                }
                            </div>
                            <button type="submit" class="btn btn-success">Tilføj Opgave</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        }

        @if (showEditTaskModal)
        {
        <div class="modal show d-block">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Rediger Opgave</h5>
                        <button type="button" class="btn-close" @onclick="CloseEditTaskModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@selectedTask" OnValidSubmit="@UpdateTask">
                            <InputText @bind-Value="selectedTask.Beskrivelse" class="form-control mb-2" placeholder="Beskrivelse" />
                            <InputText @bind-Value="selectedTask.StartTid" class="form-control mb-2" placeholder="Starttid" />
                            <InputText @bind-Value="selectedTask.SlutTid" class="form-control mb-2" placeholder="Sluttid" />
                            <InputSelect @bind-Value="selectedTask.Status" class="form-control mb-2">
                                @foreach (var status in Enum.GetValues(typeof(Status)))
                                {
                                <option value="@status">@status</option>
                                }
                            </InputSelect>
                            <InputSelect @bind-Value="selectedTask.OpgaveType" class="form-control mb-2">
                                @foreach (var opgaveType in Enum.GetValues(typeof(OpgaveType)))
                                {
                                <option value="@opgaveType">@opgaveType</option>
                                }
                            </InputSelect>
                            <div class="mb-3">
                                <label>Ansvarlige Medarbejdere:</label>
                                @foreach (var employee in employees)
                                {
                                <div class="form-check">
                                    <input
                                        class="form-check-input"
                                        type="checkbox"
                                        id="@employee.Id"
                                        value="@employee.Id"
                                        checked="@selectedTask.AnsvarligForOpgave.Contains(employee.Id)"
                                        @onchange="e => ToggleEmployeeSelection(e, employee.Id, isEdit: true)" />
                                    <label class="form-check-label" for="@employee.Id">
                                        @employee.Navn - Kompetencer: @string.Join(", ", employee.MineKompetencer)
                                    </label>
                                </div>
                                }
                            </div>
                            <button type="submit" class="btn btn-warning">Opdater</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        }
    </div>
</div>
@code {
    private List<Core.Models.Event> events = new();
    private List<Opgave> tasks = new();
    private List<Bruger> employees = new();
    private Core.Models.Event newEvent = new();
    private Core.Models.Event? selectedEvent;
    private Opgave newTask = new();
    private Opgave selectedTask = new();
    private string? selectedEventId;
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private bool showAddEventModal = false;
    private bool showEditEventModal = false;
    private bool showAddTaskModal = false;
    private bool showEditTaskModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        errorMessage = string.Empty;
        try
        {
            await LoadEvents();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke indlæse data.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEvents()
    {
        try
        {
            events = (await EventService.GetAllEventsAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke indlæse events.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = (await BrugerService.GetUsersByRoleAsync(Rolle.Medarbejder)).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke indlæse medarbejdere.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }

    private async Task ShowTasks(string eventId)
    {
        selectedEventId = eventId;
        try
        {
            await LoadEmployees();
            var allTasks = await OpgaveService.GetAllOpgaverAsync();
            tasks = allTasks.Where(t => t.EventId == eventId).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke indlæse opgaver.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }

    private void ShowAddEventModal()
    {
        newEvent = new Core.Models.Event { Dato = DateTime.Now };
        showAddEventModal = true;
    }

    private void CloseAddEventModal()
    {
        showAddEventModal = false;
    }

    private async Task AddEvent()
    {
        try
        {Console.WriteLine(JsonSerializer.Serialize(newEvent));

            await EventService.AddEventAsync(newEvent);
            await LoadEvents();
            CloseAddEventModal();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke tilføje event.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }

    private void ShowEditEventModal(Core.Models.Event ev)
    {
        selectedEvent = ev;
        showEditEventModal = true;
    }

    private void CloseEditEventModal()
    {
        showEditEventModal = false;
    }

    private async Task UpdateEvent()
    {
        try
        {
            if (selectedEvent == null) return;

            await EventService.UpdateEventAsync(selectedEvent.Id!, selectedEvent);
            await LoadEvents();
            CloseEditEventModal();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke opdatere event.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }

    private async Task DeleteEvent(string eventId)
    {
        try
        {
            await EventService.DeleteEventAsync(eventId);
            await LoadEvents();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke slette event.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }

    private async Task ShowAddTaskModal()
    {
        await LoadEmployees();
        newTask = new Opgave
        {
            EventId = selectedEventId,
            StartTid = DateTime.Now.ToString("HH:mm"),
            SlutTid = DateTime.Now.AddHours(1).ToString("HH:mm"),
            Status = Status.IkkePåbegyndt,
            AnsvarligForOpgave = new List<string>()
        };
        showAddTaskModal = true;
    }

    private void CloseAddTaskModal()
    {
        showAddTaskModal = false;
    }

    private async Task AddTask()
    {
        try
        {
            await OpgaveService.AddOpgaveAsync(newTask); 
            await ShowTasks(selectedEventId!); 

          
            newTask = new Opgave
            {
                EventId = selectedEventId,
                StartTid = DateTime.Now.ToString("HH:mm"),
                SlutTid = DateTime.Now.AddHours(1).ToString("HH:mm"),
                Status = Status.IkkePåbegyndt,
                AnsvarligForOpgave = new List<string>()
            };
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke tilføje opgave.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }


    private async Task ShowEditTaskModal(Opgave task)
    {
        await LoadEmployees();
        selectedTask = task;
        showEditTaskModal = true;
    }

    private void CloseEditTaskModal()
    {
        showEditTaskModal = false;
    }

    private async Task UpdateTask()
    {
        try
        {
            await OpgaveService.UpdateOpgaveAsync(selectedTask.Id!, selectedTask);
            await ShowTasks(selectedEventId!);
            CloseEditTaskModal();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke opdatere opgave.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }


    private async Task DeleteTask(string taskId)
    {
        try
        {
            await OpgaveService.DeleteOpgaveAsync(taskId);
            tasks = tasks.Where(t => t.Id != taskId).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Kunne ikke slette opgave.";
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }

    private void ToggleEmployeeSelection(ChangeEventArgs e, string employeeId, bool isEdit = false)
    {
        if ((bool)e.Value!)
        {
            if (isEdit)
            {
                if (!selectedTask.AnsvarligForOpgave.Contains(employeeId))
                    selectedTask.AnsvarligForOpgave.Add(employeeId);
            }
            else
            {
                if (!newTask.AnsvarligForOpgave.Contains(employeeId))
                    newTask.AnsvarligForOpgave.Add(employeeId);
            }
        }
        else
        {
            if (isEdit)
            {
                selectedTask.AnsvarligForOpgave.Remove(employeeId);
            }
            else
            {
                newTask.AnsvarligForOpgave.Remove(employeeId);
            }
        }
    }
    private async Task ToggleTasks(string eventId)
    {
        if (selectedEventId == eventId)
        {
            
            selectedEventId = null;
            tasks.Clear(); 
        }
        else
        {
            
            await ShowTasks(eventId);
        }
    }

}
