@page "/"
@inject IEventService EventService
@inject IOpgaveService OpgaveService
@inject IUserService UserService

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h3 class="mb-0">Events</h3>
        <button class="btn btn-success btn-sm" @onclick="ToggleAddEvent">Tilføj Event</button>
    </div>
    @if (events == null)
    {
    <p>Indlæser events...</p>
    }
    else if (!events.Any())
    {
    <p>Ingen events fundet.</p>
    }
    else
    {
    <ul class="list-group">
        @foreach (var ev in events)
        {
        <li class="list-group-item">
            <div class="d-flex justify-content-between align-items-center">
                <!-- Primary Event Details -->
                <div @onclick="() => ToggleTaskList(ev.Id)" style="cursor: pointer;">
                    <strong>@ev.Name</strong> - @ev.Dato.ToShortDateString() - Lokation: @ev.Lokation
                    <br />
                    Kunde: @ev.Kunde - Madvalg: @ev.MadValg - Særlige Ønsker: @ev.SærligeØnsker - Deltagerantal: @ev.DeltagerAntal
                    <i class="ms-2 @(openEventId == ev.Id ? "bi bi-chevron-up" : "bi bi-chevron-down")"></i>
                </div>
                <!-- Actions -->
                <div>
                    <button class="btn btn-warning btn-sm me-2" @onclick="() => ToggleEditEvent(ev.Id)">Rediger</button>
                    <button class="btn btn-danger btn-sm me-2" @onclick="() => DeleteEvent(ev.Id)">Slet</button>
                    <button class="btn btn-primary btn-sm" @onclick="() => OpenAddTaskModal(ev)">Tilføj Opgave</button>
                </div>
            </div>

            @if (openEventId == ev.Id && !isEditing)
            {
            <!-- Associated Tasks -->
            <div class="mt-3">
                <h5>Opgaver:</h5>
                @if (!tasksByEvent.ContainsKey(ev.Id) || !tasksByEvent[ev.Id].Any())
                {
                <p>Ingen opgaver tilknyttet dette event.</p>
                }
                else
                {
                <ul class="list-group">
                    @foreach (var task in tasksByEvent[ev.Id])
                    {
                    <li class="list-group-item">
                        <strong>@task.Beskrivelse</strong> - Status: <span class="badge bg-info">@task.Status</span>
                        <div>Start: @task.StartTid | Slut: @task.SlutTid</div>
                        <div>Medarbejdere:
                            @if (task.AssignedEmployeeIds.Any())
                            {
                            @foreach (var empId in task.AssignedEmployeeIds)
                            {
                            var employee = employees.FirstOrDefault(e => e.Id == empId);
                            if (employee != null)
                            {
                            <span class="badge bg-secondary">@employee.Navn</span>
                            }
                            }
                            }
                            else
                            {
                            <span class="text-muted">Ingen medarbejdere tilknyttet</span>
                            }
                        </div>
                    </li>
                    }
                </ul>
                }
            </div>
            }

            @if (openEventId == ev.Id && isEditing)
            {
            <!-- Edit Event Form -->
            <div class="mt-3">
                <EditForm Model="@editEvent" OnValidSubmit="@SaveEditedEvent">
                    <div class="mb-3">
                        <label for="eventName" class="form-label">Navn:</label>
                        <InputText id="eventName" @bind-Value="editEvent.Name" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="eventLocation" class="form-label">Lokation:</label>
                        <InputText id="eventLocation" @bind-Value="editEvent.Lokation" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="eventDate" class="form-label">Dato:</label>
                        <InputDate id="eventDate" @bind-Value="editEvent.Dato" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="eventFood" class="form-label">Madvalg:</label>
                        <InputText id="eventFood" @bind-Value="editEvent.MadValg" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="specialRequests" class="form-label">Særlige Ønsker:</label>
                        <InputText id="specialRequests" @bind-Value="editEvent.SærligeØnsker" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="customer" class="form-label">Kunde:</label>
                        <InputText id="customer" @bind-Value="editEvent.Kunde" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-primary">Gem</button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="CloseEditEvent">Luk</button>
                </EditForm>
            </div>
            }
        </li>
        }
    </ul>
    }

    @if (showTaskModal)
    {
    <div class="modal" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Tilføj Opgave til Event: @selectedEvent?.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseTaskModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newTask" OnValidSubmit="@AddTask">
                        <div class="mb-3">
                            <label for="taskDescription" class="form-label">Beskrivelse:</label>
                            <InputText id="taskDescription" @bind-Value="newTask.Beskrivelse" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="taskStart" class="form-label">Starttid:</label>
                            <InputDate id="taskStart" @bind-Value="newTask.StartTid" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="taskEnd" class="form-label">Sluttid:</label>
                            <InputDate id="taskEnd" @bind-Value="newTask.SlutTid" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="taskEmployees" class="form-label">Medarbejdere:</label>
                            @foreach (var employee in employees)
                            {
                                <div>
                                    <input type="checkbox" id="@employee.Id" value="@employee.Id" @onchange="e => ToggleEmployeeSelection(e, employee.Id)" />
                                    <label for="@employee.Id">@employee.Navn</label>
                                </div>
                            }
                        </div>
                        <button type="submit" class="btn btn-primary">Tilføj</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    }
    
</div>
@if (showAddEvent)
{
<div class="mt-3">
    <EditForm Model="@newEvent" OnValidSubmit="@AddNewEvent">
        <div class="mb-3">
            <label for="newEventName" class="form-label">Navn:</label>
            <InputText id="newEventName" @bind-Value="newEvent.Name" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="newEventLocation" class="form-label">Lokation:</label>
            <InputText id="newEventLocation" @bind-Value="newEvent.Lokation" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="newEventDate" class="form-label">Dato:</label>
            <InputDate id="newEventDate" @bind-Value="newEvent.Dato" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="newEventFood" class="form-label">Madvalg:</label>
            <InputText id="newEventFood" @bind-Value="newEvent.MadValg" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="newSpecialRequests" class="form-label">Særlige Ønsker:</label>
            <InputText id="newSpecialRequests" @bind-Value="newEvent.SærligeØnsker" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="newCustomer" class="form-label">Kunde:</label>
            <InputText id="newCustomer" @bind-Value="newEvent.Kunde" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="newParticipantCount" class="form-label">Deltagerantal:</label>
            <InputNumber id="newParticipantCount" @bind-Value="newEvent.DeltagerAntal" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Gem</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="ToggleAddEvent">Annuller</button>
    </EditForm>
</div>
}
@code {
    private List<ServerAPI.Models.Event> events = new();
    private Dictionary<string, List<Opgave>> tasksByEvent = new();
    private ServerAPI.Models.Event? selectedEvent;
    private Opgave newTask = new();
    private ServerAPI.Models.Event? editEvent;
    private List<Bruger> employees = new();
    private string? openEventId = null;
    private bool isEditing = false;
    private bool showTaskModal = false;
    private ServerAPI.Models.Event newEvent = new();
    private bool showAddEvent = false;
    private string? openTaskId = null;
    private Opgave? editTask = null;
    private HashSet<string> selectedEmployeeIds = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        await LoadTasks();
        await LoadEmployees();
    }

    private async Task LoadEvents()
    {
            events = await EventService.GetAllEventsAsync() ?? new List<ServerAPI.Models.Event>();
    }

    private async Task LoadTasks()
    {
        var allTasks = await OpgaveService.GetAllOpgaverAsync() ?? new List<Opgave>();
        tasksByEvent = allTasks
            .Where(task => task.EventId != null)
            .GroupBy(task => task.EventId!)
            .ToDictionary(group => group.Key, group => group.ToList());
    }

    private async Task LoadEmployees()
    {
        employees = await UserService.GetUsersByRoleAsync(Rolle.Medarbejder) ?? new List<Bruger>();
    }

    private void ToggleTaskList(string eventId)
    {
        openEventId = openEventId == eventId ? null : eventId;
        isEditing = false;
    }

    private void ToggleEditEvent(string eventId)
    {
        if (openEventId == eventId && isEditing)
        {
            CloseEditEvent();
            return;
        }

        openEventId = eventId;
        editEvent = events.FirstOrDefault(e => e.Id == eventId);
        isEditing = true;
    }

    private void CloseEditEvent()
    {
        isEditing = false;
        editEvent = null;
    }

    private async Task SaveEditedEvent()
    {
        if (editEvent != null)
        {
            await EventService.UpdateEventAsync(editEvent);
            isEditing = false;
            await LoadEvents();
        }
    }

    private void ToggleEmployeeSelection(ChangeEventArgs e, string employeeId)
    {
        if ((bool)e.Value!)
        {
            selectedEmployeeIds.Add(employeeId);
        }
        else
        {
            selectedEmployeeIds.Remove(employeeId);
        }
    }

    private async Task AddTask()
    {
        newTask.AssignedEmployeeIds = selectedEmployeeIds.ToList();
        newTask.EventId = selectedEvent?.Id!;
        
        await OpgaveService.AddOpgaveAsync(newTask);
        
        await LoadTasks();
        
        newTask = new Opgave
        {
            StartTid = DateTime.Now,
            SlutTid = DateTime.Now.AddHours(1)
        };
        selectedEmployeeIds.Clear(); 
    }


    private void OpenAddTaskModal(ServerAPI.Models.Event ev)
    {
        selectedEvent = ev;
        newTask = new Opgave
        {
            StartTid = DateTime.Now,
            SlutTid = DateTime.Now.AddHours(1)
        };
        showTaskModal = true;
    }

    private void CloseTaskModal()
    {
        showTaskModal = false;
        newTask = new Opgave();
        selectedEmployeeIds.Clear();
    }

    private async Task DeleteEvent(string eventId)
    {
        await EventService.DeleteEventAsync(eventId);
        await LoadEvents();
        await LoadTasks();
    }
    private void ToggleAddEvent()
    {
        showAddEvent = !showAddEvent;
        if (showAddEvent)
        {
                newEvent = new ServerAPI.Models.Event
            {
                Dato = DateTime.Now
            };
        }
    }

    private async Task AddNewEvent()
    {
        await EventService.AddEventAsync(newEvent);
        await LoadEvents();
        showAddEvent = false;
    }
    
}
