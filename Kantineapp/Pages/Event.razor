@page "/events"

@inject IEventService EventService
@inject IOpgaveService OpgaveService

<h3>Events</h3>

@if (events == null)
{
    <p>Loading...</p>
}
else if (!events.Any())
{
    <p>Ingen events tilgængelige.</p>
}
else
{
    <ul>
        @foreach (var ev in events)
        {
        <li>
            @ev.Name - @ev.Dato.ToShortDateString() - @ev.Sted - @ev.DeltagerAntal deltagere
            <button @onclick="() => VælgEvent(ev)">Vælg</button>
            <button @onclick="() => RedigerEvent(ev)">Rediger</button>
            <button @onclick="() => SletEvent(ev.Id)">Slet</button>
        </li>
        }
    </ul>
}

@if (selectedEvent != null)
{
    <h4>Opgaver for @selectedEvent.Name</h4>
    @if (opgaver == null)
    {
        <p>Loading opgaver...</p>
    }
    else if (!opgaver.Any())
    {
        <p>Ingen opgaver til dette event.</p>
    }
    else
    {<ul>
            @foreach (var opgave in opgaver)
            {
                <li>
                    @opgave.Navn - Status: @opgave.Status
                    <ul>
                        @foreach (var medarbejderId in opgave.MedarbejderIds)
                        {
                            var medarbejder = medarbejdere.FirstOrDefault(m => m.Id == medarbejderId);
                            <li>@(medarbejder?.Navn ?? "Ukendt medarbejder")</li>
                        }
                    </ul>
                </li>
            }
        </ul>

    }

    <h5>Tilføj ny opgave</h5>
    <EditForm Model="@nyOpgave" OnValidSubmit="@TilføjOpgave">
        <div>
            <label>Navn:</label>
            <InputText @bind-Value="nyOpgave.Navn" />
        </div>
        <div>
            <label>Status:</label>
            <InputSelect @bind-Value="nyOpgave.Status">
                <option value="Ikke Påbegyndt">Ikke Påbegyndt</option>
                <option value="Igang">Igang</option>
                <option value="Færdig">Færdig</option>
            </InputSelect>
        </div>
   
        <div>
            <label>Vælg medarbejdere:</label>
            <ul>
                @foreach (var medarbejder in medarbejdere)
                {
                    <li>
                        <input type="checkbox" value="@medarbejder.Id" @onchange="(e) => ToggleMedarbejderSelection(e, medarbejder.Id)" />
                        @medarbejder.Navn (@medarbejder.Kompetence)
                    </li>
                }
            </ul>
        </div>
        <button type="submit">Tilføj opgave</button>
    </EditForm>
}

<h5>@(isEditMode ? "Rediger Event" : "Opret nyt Event")</h5>
<EditForm Model="@currentEvent" OnValidSubmit="@GemEvent">
    <div>
        <label>Navn:</label>
        <InputText @bind-Value="currentEvent.Name" />
    </div>
    <div>
        <label>Dato:</label>
        <InputDate @bind-Value="currentEvent.Dato" />
    </div>
    <div>
        <label>Sted:</label>
        <InputText @bind-Value="currentEvent.Sted" />
    </div>
    <div>
        <label>DeltagerAntal:</label>
        <InputNumber @bind-Value="currentEvent.DeltagerAntal" />
    </div>
    <button type="submit">@((isEditMode) ? "Opdater" : "Tilføj") Event</button>
    @if (isEditMode)
    {
        <button @onclick="AnnullerRedigering">Annuller</button>
    }
</EditForm>

@code {
    private List<Core.Models.Event> events = new();
    private List<Opgave> opgaver = new();
    private List<User> medarbejdere = new();
    private List<string> selectedMedarbejdere = new();
    private Core.Models.Event? selectedEvent;
    private Core.Models.Event currentEvent = new();
    private Opgave nyOpgave = new();
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await HentEvents();
        await HentMedarbejdere();
    }

    private async Task HentEvents()
    {
        events = await EventService.GetAllEventsAsync();
    }

    private async Task HentOpgaver()
    {
        if (selectedEvent?.Id != null)
        {
            opgaver = await OpgaveService.GetOpgaverByEventIdAsync(selectedEvent.Id);
        }
    }

    private async Task HentMedarbejdere()
    {
        var alleBrugere = await OpgaveService.GetMedarbejdereAsync();
        medarbejdere = alleBrugere.Where(u => u.Rolle == "Medarbejder").ToList();
    }

    private void VælgEvent(Core.Models.Event ev)
    {
        selectedEvent = ev;
        nyOpgave = new Opgave
        {
            Status = "Ikke Påbegyndt"
        };
        selectedMedarbejdere.Clear();
        _ = HentOpgaver();
    }


    private void RedigerEvent(Core.Models.Event ev)
    {
        currentEvent = new Core.Models.Event
        {
            Id = ev.Id,
            Name = ev.Name,
            Dato = ev.Dato,
            Sted = ev.Sted,
            DeltagerAntal = ev.DeltagerAntal
        };
        isEditMode = true;
    }

    private void AnnullerRedigering()
    {
        currentEvent = new Core.Models.Event();
        selectedEvent = null;
        isEditMode = false;
        opgaver = new();
    }

    private async Task TilføjOpgave()
    {
        if (selectedEvent?.Id != null)
        {
            nyOpgave.MedarbejderIds = selectedMedarbejdere.ToList();
            await OpgaveService.AddOpgaveAsync(selectedEvent.Id, nyOpgave);
            nyOpgave = new Opgave();
            selectedMedarbejdere.Clear();
            await HentOpgaver();
        }
    }

    private async Task GemEvent()
    {
        if (isEditMode)
        {
            await EventService.UpdateEventAsync(currentEvent);
        }
        else
        {
            await EventService.AddEventAsync(currentEvent);
        }

        currentEvent = new Core.Models.Event();
        isEditMode = false;
        await HentEvents();
    }

    private async Task SletEvent(string? id)
    {
        if (!string.IsNullOrEmpty(id))
        {
            await EventService.DeleteEventAsync(id);
            if (selectedEvent?.Id == id)
            {
                selectedEvent = null;
                opgaver = new();
            }
            await HentEvents();
        }
    }

    private void ToggleMedarbejderSelection(ChangeEventArgs e, string medarbejderId)
    {
        if (e.Value is bool isChecked && isChecked)
        {
            if (!selectedMedarbejdere.Contains(medarbejderId))
            {
                selectedMedarbejdere.Add(medarbejderId);
            }
        }
        else
        {
            selectedMedarbejdere.Remove(medarbejderId);
        }
    }
}
