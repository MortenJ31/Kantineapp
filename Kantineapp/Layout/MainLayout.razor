@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (isUserLoggedIn)
{
    <div class="app-layout">
        <aside class="navbar">
            <NavMenu OnLogout="HandleLogout" />
        </aside>
        <main class="content">
            @Body
        </main>
    </div>
}
else
{
    <main class="content">
        @Body
    </main>
}

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .app-layout {
        display: flex;
        height: 100vh;
        overflow: hidden;
    }

    .content {
        flex: 1;
        padding: 1rem;
        background-color: #ffffff;
        overflow-y: auto;
    }
</style>

@code {
    private bool isUserLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        await CheckLoginStatus();
    }

    private async Task CheckLoginStatus()
    {
        var userRole = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userRole");
        isUserLoggedIn = !string.IsNullOrEmpty(userRole);

        if (!isUserLoggedIn)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogout()
    {
        // Fjern userRole fra sessionStorage
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "userRole");

        // Sæt login-status til false og opdater layoutet
        isUserLoggedIn = false;

        // Naviger til login-siden
        NavigationManager.NavigateTo("/");

        // Opdater UI
        StateHasChanged();
    }
}